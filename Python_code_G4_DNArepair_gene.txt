
# coding: utf-8

# In[1]:

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import matplotlib
get_ipython().magic(u'matplotlib inline')


# In[3]:

dna_repair = pd.read_table("dna_repair_gene/DNA_repair_and_name.txt", sep='\t', header=None)
dna_repair.columns=['bioentity', 'symbol', 'gene_info']
dna_repair['symbol']=[x.upper() for x in dna_repair['symbol']]


# In[191]:

random_390=np.random.choice(all_gene_symbol, size=390, replace=False)


# In[214]:

random_44786=np.random.choice(all_gene_symbol, size=44786, replace=False)
sum(G4_all_within_genes['gene_symbol'].isin(random_44786))


# In[215]:

G4_all_within_genes.shape


# In[193]:

G4_all_within_genes=pd.read_table('/Users/Yun/Desktop/dna_repair_gene/all_G4_within_up2000_down1000.txt', sep='\t')


# In[207]:

G4_all_within_genes.groupby('gene_symbol').count().G4_seq.median()


# In[212]:

all_genes = pd.read_table("dna_repair_gene/geneid_symbols.txt", sep='\t')
all_genes.columns=['kgID', 'symbol']
all_gene_symbol=all_genes.symbol.unique()
print all_genes.shape, len(all_gene_symbol)
all_genes.head(100)


# In[124]:

G4_all_within_genes.loc(G4_all_within_genes['gene_symbol'].isin(all_gene_symbol))


# In[36]:

def check_genes(x):
    if x in all_gene_symbol:
        return x


# In[40]:

sum(G4_tss_distance['gene_symbol'].isin(dna_repair.symbol))/float(390)


# In[192]:

sum(G4_all_within_genes['gene_symbol'].isin(random_390))


# In[39]:

np.random.seed(0)
rand_G4s=[]
for i in range(500):
    random_390=np.random.choice(all_gene_symbol, size=390, replace=False)
    rand_G4s.append(sum(G4_all_within_genes['gene_symbol'].isin(random_390)))


# In[40]:

import seaborn as sns
import scipy
import matplotlib.ticker as mtick
def plot_bar(my_list, start=0, end=9, color='green',alpha=0.5): 
    fig, ax=plt.subplots() ## build axis 
    font = {'family': 'serif',
        'color':  'darkred',
        'weight': 'normal',
        'size': 20,
        }
    ax.set_xlabel('Density of PQSs per Gene', fontdict=font)
    ax.set_ylabel('Counts', fontdict=font)
    bins=np.linspace(start,end,(end-start)/0.25)
    plt.hist(my_list, bins=bins, color=color, alpha=alpha) ## histplot with bins, and normed
    #ax.yaxis.set_major_formatter(mtick.FormatStrFormatter('%.1e'))
    matplotlib.rc('xtick', labelsize=16)
    matplotlib.rc('ytick', labelsize=16)


# In[185]:

rand_G4s


# In[186]:

rand_G4s_per_gene=[float(i)/390.0 for i in rand_G4s]
rand_G4s_per_gene


# In[96]:

from scipy.stats import norm
mean, std=norm.fit(rand_G4s)
print(mean, std)

scipy.stats.norm(mean, std).pdf(2974) ## calculate probability at 2987


# In[94]:

help(norm.pdf)


# In[43]:

plot_bar(rand_G4s_per_gene)
plt.savefig("/Users/Yun/Desktop/dna_repair_gene/G4_in_random_sets_genes.png", dpi=500)


# In[205]:

kgID_dna_repair=dna_repair.merge(all_genes, on='symbol')


# In[210]:

print kgID_dna_repair.shape, len(kgID_dna_repair.symbol.unique()) ## 390 unique 
kgID_dna_repair.head(100)


# In[219]:

print len(tss_dist_up_down.gene_symbol.unique())
odd_dna_repair=[]
for i in kgID_dna_repair.symbol.unique():
    if i not in tss_dist_up_down.gene_symbol.unique():
        odd_dna_repair.append(i)
print len(odd_dna_repair)


# In[ ]:




# In[48]:

utr5=pd.read_table('utr5.txt', sep='\t', header=None)


# In[157]:

utr5.shape


# In[51]:

utr5.columns=['chr', 'start', 'end', 'gene_id', 'N', 'strand']
utr5.head()
utr5['kgID'], utr5['N2']=utr5.gene_id.str.split('_', 1).str ## split kgID out of gene_id
utr5 = utr5.drop(axis=1, labels=['N', 'N2']) ## drop the two columns
utr5_dna_repair=utr5.merge(kgID_dna_repair, how='inner', on='kgID')
utr5_dna_repair.to_csv('./dna_repair_gene/utr5_dna_repair.txt', sep='\t', index=False)


# In[67]:

whole_gene=pd.read_table("whole_gene.txt", sep='\t', header=None)
whole_gene.head()


# In[7]:

def find_tss(mydf): 
    """add a column of tss to mydf, return mydf, for downstream TSS"""
    tss=np.zeros(mydf.shape[0])
    for i in range(mydf.shape[0]):
        if mydf.strand[i]=='-':
            tss[i]=mydf.end[i]
        else:
            tss[i]=mydf.start[i]
    mydf['tss']=tss
    return mydf


# In[ ]:




# In[8]:

def find_tss_upstream(mydf): 
    """add a column of tss to mydf, return mydf"""
    tss=np.zeros(mydf.shape[0])
    for i in range(mydf.shape[0]):
        if mydf.strand[i]=='-':
            tss[i]=mydf.start[i]
        else:
            tss[i]=mydf.end[i]
    mydf['tss']=tss
    return mydf


# In[410]:

up_2000=pd.read_table('dna_repair_gene/up2000_promoter.txt', sep='\t', header=None)
up_2000.columns=['chr', 'start', 'end', 'gene_id', 'N', 'strand']
up_2000['kgID'], up_2000['N2']=up_2000.gene_id.str.split('_', 1).str
up_2000= up_2000.drop(axis=1, labels=['N', 'N2'])
up_2000_dna_repair_gene=up_2000.merge(kgID_dna_repair, how='inner', on='kgID')


# In[417]:

down_1000=pd.read_table('dna_repair_gene/down_1000.txt', sep='\t', header=None)
down_1000.columns=['chr', 'start', 'end', 'gene_id', 'N', 'strand']
down_1000['kgID'], down_1000['N2']=down_1000.gene_id.str.split('_', 1).str
down_1000 = down_1000.drop(axis=1, labels=['N', 'N2'])
down_1000_dna_repair_gene=down_1000.merge(kgID_dna_repair, how='inner', on='kgID')


# In[294]:

find_tss(down_1000_dna_repair_gene).to_csv('dna_repair_gene/down1000_dna_repair.txt', sep='\t', index=False)


# In[313]:

find_tss_upstream(up_2000_dna_repair_gene).to_csv('dna_repair_gene/up2000_dna_repair.txt', sep='\t', index=False)


# In[282]:

down_1000_dna_repair_gene.head()


# In[293]:

find_tss(down_1000_dna_repair_gene).head(1000)


# In[411]:

up_2000=up_2000.merge(all_genes, on='kgID')


# In[418]:


down_1000=down_1000.merge(all_genes, on='kgID')


# In[413]:


find_tss_upstream(up_2000).to_csv('dna_repair_gene/up_2000_with_tss.txt', sep='\t', index=False)


# In[419]:

find_tss(down_1000).to_csv('dna_repair_gene/down_1000_with_tss.txt', sep='\t', index=False)


# In[52]:

G4_up2000=pd.read_csv('/Users/Yun/Desktop/dna_repair_gene/up2000_wo.txt', sep='\t', header=None)
G4_down1000 = pd.read_csv('/Users/Yun/Desktop/dna_repair_gene/down1000_wo.txt', sep='\t', header=None)


# In[53]:

G4_all_up2000_down1000=G4_up2000.append(G4_down1000, ignore_index=True) ## merge all G4s


# In[19]:

## after intersection with the G4 file with bedtools, merge them to one file for DNArepair protein
G4_DNArepair_2000promoter=pd.read_csv('/Users/Yun/Desktop/dna_repair_gene/up2000_DNArepair_wo.txt', sep='\t', header=None)
G4_DNArepair_down1000=pd.read_csv('/Users/Yun/Desktop/dna_repair_gene/down1000_DNArepair_wo.txt', sep='\t', header=None)


# In[24]:

G4_DNArepair_up2000_down_1000=G4_DNArepair_2000promoter.append(G4_DNArepair_down1000, ignore_index=True)## join two dataframe together


# In[66]:

## DNA repair protein with distance to TSS
tss_dist_up_down=distance_to_tss(G4_DNArepair_up2000_down_1000) 


# In[25]:

plot_distance_tss_bar(tss_dist_up_down, start=-2000, end=1000)


# In[26]:

G4_all_up2000_down1000.head()


# In[27]:

G4_tss_distance=distance_to_tss_all_G4(G4_all_up2000_down1000)


# In[73]:

tss_dist_up_down.to_csv("/Users/Yun/Desktop/dna_repair_gene/G4_DNArepair_up2000_down1000.txt", sep='\t', index=False)
G4_tss_distance.to_csv("/Users/Yun/Desktop/dna_repair_gene/all_G4_within_up2000_down1000.txt", sep='\t', index=False)


# In[69]:

G4_tss_distance=G4_tss_distance.drop('Unnamed: 0', axis=1)


# In[78]:

G4_tss_distance.head()


# In[3]:

tss_dist_up_down=pd.read_table('/Users/Yun/Desktop/dna_repair_gene/G4_DNArepair_up2000_down1000.txt', sep='\t')
G4_tss_distance=pd.read_table('/Users/Yun/Desktop/dna_repair_gene/all_G4_within_up2000_down1000.txt', sep='\t')


# In[23]:

import pandas as pd
def distance_to_tss_all_G4(mydf):
    """the columns are slightly different in all the G4s compare to the DNA repair G4s because of the merging with GO,
    a function take a dataframe to calculate the distance to tss based on the strand for promoter,
    return a pandas data frame, column 12 is tss, gene symbol is column 11"""
    d=[]
    for i in range(mydf.shape[0]):
        if mydf.iloc[i,1]==mydf.iloc[i-1,1] and mydf.iloc[i,11] == mydf.iloc[i-1,11]:
            continue
        elif mydf.iloc[i,9]=='-' and mydf.iloc[i,3]=='+': 
            if mydf.iloc[i,12]<mydf.iloc[i,1]: # upstream of TSS, Tss-G4_start
                d.append([mydf.iloc[i,12]-mydf.iloc[i,1], 'template', mydf.iloc[i,11], mydf.iloc[i,4]])
            else: #downstream of TSS, tss -G4_end
                d.append([mydf.iloc[i,12]-mydf.iloc[i,2], 'template', mydf.iloc[i,11], mydf.iloc[i,4]])
        elif mydf.iloc[i,9]=='-' and mydf.iloc[i,3]=='-':
            if mydf.iloc[i,12]<mydf.iloc[i,1]: # upstream of TSS, Tss-G4_start
                d.append([mydf.iloc[i,12]-mydf.iloc[i,1], 'template', mydf.iloc[i,11], reverse_comp(mydf.iloc[i,4])])
            else: #downstream of TSS, tss -G4_end
                d.append([mydf.iloc[i,12]-mydf.iloc[i,2], 'template', mydf.iloc[i,11], reverse_comp(mydf.iloc[i,4])])
        elif mydf.iloc[i,9]=='+' and mydf.iloc[i,3]=='+': ## on + stand, tss -end
            if mydf.iloc[i,12]<mydf.iloc[i,1]: #downstream of TSS
                d.append([mydf.iloc[i,1]-mydf.iloc[i,12], 'coding',mydf.iloc[i,11],mydf.iloc[i,4]])
            else: #upstream of TSS, use the end of g4 location
                d.append([mydf.iloc[i,2]-mydf.iloc[i,12], 'coding',mydf.iloc[i,11],mydf.iloc[i,4]])
        elif mydf.iloc[i,9]=='+' and mydf.iloc[i,3]=='-':
            if mydf.iloc[i,12]<mydf.iloc[i,1]: #downstream of TSS
                d.append([mydf.iloc[i,1]-mydf.iloc[i,12], 'coding',mydf.iloc[i,11],reverse_comp(mydf.iloc[i,4])])
            else: #upstream of TSS, use the end of g4 location
                d.append([mydf.iloc[i,2]-mydf.iloc[i,12], 'coding',mydf.iloc[i,11],reverse_comp(mydf.iloc[i,4])])
    """for i in range(len(d)): ## covert the positive location to TSS location
        if d[i][0]>-30 and d[i][0]<30:
            d[i][0]=0"""
    df_d=pd.DataFrame.from_records(d) 
    df_d.columns=['distance_to_tss', 'strand', 'gene_symbol', 'G4_seq']
    df_d=df_d.sort_values(by='gene_symbol')
    
    return df_d


# In[79]:

plot_distance_tss_bar(tss_dist_up_down, start=-2000, end=1000, strand='coding', alpha=0.6, color ='red')
plot_distance_tss_2(G4_tss_distance, start=-2000, end=1000, alpha=1, color='blue') ## only draw steps in the figures
plt.tight_layout() # otherwise the figure will be cropped
plt.savefig("/Users/Yun/Desktop/dna_repair_gene/coding.png", dpi=500)


# In[ ]:




# In[80]:


plot_distance_tss_bar(tss_dist_up_down, start=-2000, end=1000, strand='template', alpha=0.5, color ='black') ## G4_repair plot hist
#plot_distance_tss_2(G4_tss_distance, start=-2000, end=1000, strand='template', alpha=1, color='blue') ## only draw steps in the figures
plt.tight_layout()
plt.savefig("/Users/Yun/Desktop/dna_repair_gene/template.png", dpi=500)


# In[98]:

def reverse_comp(seq):
    bases_dict = {'A':'T', 'T':'A', 'G':'C', 'C':'G'}
    return ''.join(bases_dict.get(base,base) for base in seq[::-1])


# In[22]:

import pandas as pd
import seaborn as sns
def distance_to_tss(mydf):
    """a function take a dataframe to calculate the distance to tss based on the strand for promoter,
    return a pandas data frame, column 14 is tss"""
    d=[]
    for i in range(mydf.shape[0]):
        if mydf.iloc[i,1]==mydf.iloc[i-1,1] and mydf.iloc[i,12] == mydf.iloc[i-1,12]:
            continue
        elif mydf.iloc[i,9]=='-' and mydf.iloc[i,3]=='+': 
            if mydf.iloc[i,14]<mydf.iloc[i,1]: # upstream of TSS, Tss-G4_start
                d.append([mydf.iloc[i,14]-mydf.iloc[i,1], 'template', mydf.iloc[i,12], mydf.iloc[i,4]])
            else: #downstream of TSS, tss -G4_end
                d.append([mydf.iloc[i,14]-mydf.iloc[i,2], 'template', mydf.iloc[i,12], mydf.iloc[i,4]])
        elif mydf.iloc[i,9]=='-' and mydf.iloc[i,3]=='-':
            if mydf.iloc[i,14]<mydf.iloc[i,1]: # upstream of TSS, Tss-G4_start
                d.append([mydf.iloc[i,14]-mydf.iloc[i,1], 'template', mydf.iloc[i,12], reverse_comp(mydf.iloc[i,4])])
            else: #downstream of TSS, tss -G4_end
                d.append([mydf.iloc[i,14]-mydf.iloc[i,2], 'template', mydf.iloc[i,12], reverse_comp(mydf.iloc[i,4])])
        elif mydf.iloc[i,9]=='+' and mydf.iloc[i,3]=='+': ## on + stand, tss -end
            if mydf.iloc[i,14]<mydf.iloc[i,1]: #downstream of TSS
                d.append([mydf.iloc[i,1]-mydf.iloc[i,14], 'coding',mydf.iloc[i,12],mydf.iloc[i,4]])
            else: #upstream of TSS, use the end of g4 location
                d.append([mydf.iloc[i,2]-mydf.iloc[i,14], 'coding',mydf.iloc[i,12],mydf.iloc[i,4]])
        elif mydf.iloc[i,9]=='+' and mydf.iloc[i,3]=='-':
            if mydf.iloc[i,14]<mydf.iloc[i,1]: #downstream of TSS
                d.append([mydf.iloc[i,1]-mydf.iloc[i,14], 'coding',mydf.iloc[i,12],reverse_comp(mydf.iloc[i,4])])
            else: #upstream of TSS, use the end of g4 location
                d.append([mydf.iloc[i,2]-mydf.iloc[i,14], 'coding',mydf.iloc[i,12],reverse_comp(mydf.iloc[i,4])])
    """for i in range(len(d)): ## covert the positive location to TSS location
        if d[i][0]>-30 and d[i][0]<30:
            d[i][0]=0"""
    df_d=pd.DataFrame.from_records(d)
    df_d.columns=['distance_to_tss', 'strand', 'gene_symbol', 'G4_seq']
    df_d=df_d.sort_values(by='gene_symbol')
    
    return df_d


# In[95]:

help(plt.subplots)


# In[78]:

import numpy as np
import matplotlib.pyplot as plt
from matplotlib.pyplot import *
def plot_distance_tss_bar(mydf, start=-1000, end=0, strand='coding', color='red',alpha=0.5): 
    fig, ax=plt.subplots() ## build axis 
    font = {'family': 'serif',
        'color':  'darkred',
        'weight': 'normal',
        'size': 20,
        }
    ax.set_xlabel('Position Relative to TSS (nt) ', fontdict=font)
    ax.set_ylabel('Relative Frequency', fontdict=font)
    data=mydf[mydf.strand==strand].iloc[:,0]
    bins=np.linspace(start,end,(end-start)/50)
    plt.hist(data,bins=bins, color=color, label='DNA repair protein',alpha=alpha, normed=True) ## histplot with bins, and normed
    ax.yaxis.set_major_formatter(mtick.FormatStrFormatter('%.1e'))
    plt.legend(data, "DNA repair protein")
    matplotlib.rc('xtick', labelsize=16)
    matplotlib.rc('ytick', labelsize=16)


# In[75]:

import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import matplotlib.ticker as mtick
def plot_distance_tss_2(mydf, start=-1000, end=0, strand='coding', color='red',alpha=0.5):
    """don't draw a new figure, add to the old one"""
    data = mydf[mydf.strand==strand].iloc[:,0],
    bins=np.linspace(start,end,(end-start)/50)
    sns.distplot( data, hist=True, bins=bins, kde=False,label=strand, color=color, hist_kws={"histtype": "step", "linewidth": 3,
     "alpha": alpha, "color": color}, norm_hist=True)


# In[99]:

import re
g5=re.compile(r'([gG]{3,}\w{1,12}){4,}[gG]{3,}')


# In[128]:

tss_dist_up_down.shape


# In[120]:

sum([len(g5.findall(i)) for i in tss_dist_up_down.G4_seq]) # 1366 out of 2974 have spare tire


# In[133]:

float(1366.00/2974.00)


# In[129]:

sum([len(g5.findall(i)) for i in G4_all_within_genes.G4_seq]) # 91259 out of 194172 have spare tire


# In[247]:

G4_all_within_genes.head()


# In[134]:

float(91259.00/194172.00)


# In[152]:

high_G4_all_genes=G4_all_within_genes.groupby('gene_symbol').count().sort('G4_seq', ascending=False)


# In[172]:

high_G4_DNArepair_genes=tss_dist_up_down.groupby('gene_symbol').count().sort('G4_seq', ascending=False)


# In[242]:

gene_50_15=high_G4_all_genes[(high_G4_all_genes.G4_seq>15) & (high_G4_all_genes.G4_seq<50)]
gene_50_15=gene_50_15.reset_index()


# In[244]:

gene_50_15.to_csv("/Users/Yun/Desktop/dna_repair_gene/genes_G4_between_15_50.txt", sep='\t',index=None)


# In[245]:

gene_50_15.head(500)


# In[173]:

[i for i in high_G4_DNArepair_genes[high_G4_DNArepair_genes.G4_seq>70].index]


# In[49]:

high_G4_all_genes[high_G4_all_genes.G4_seq>60]


# In[67]:

G4_all_within_genes[G4_all_within_genes.gene_symbol=='Y_RNA'].sort('distance_to_tss')


# In[65]:

G4_all_up2000_down1000[G4_all_up2000_down1000.iloc[:,11]=='Y_RNA'].iloc[:,0].unique() ## Y_RNA have multiple copies in the genome


# In[93]:

DNArepair_in_BG4=pd.read_table('/Users/Yun/Desktop/dna_repair_gene/dna_repair_in_BG4_ChIP.txt', header=None)


# In[94]:

DNArepair_in_XPB_XPD=pd.read_table('/Users/Yun/Desktop/dna_repair_gene/dna_repair_in_XPB_XPD.txt', header=None)


# In[95]:

DNArepair_in_BG4.head()


# In[99]:

def reverse_comp(seq):
    bases_dict = {'A':'T', 'T':'A', 'G':'C', 'C':'G'}
    return ''.join(bases_dict.get(base,base) for base in seq[::-1])


# In[103]:

def remove_duplicate_G4(mydf):
    """compare G4 start with gene symbol, if they are the same, only keep one"""
    to_drop=[]
    for i in range(1,mydf.shape[0]):
        if mydf.iloc[i,1]==mydf.iloc[i-1,1] and mydf.iloc[i,12] == mydf.iloc[i-1,12]:
            to_drop.append(i)
    for i in range(mydf.shape[0]):
        if mydf.iloc[i,3]=='-':
            mydf.iloc[i,4]=reverse_comp(mydf.iloc[i,4])
    mydf=mydf.drop(mydf.index[to_drop])

    return mydf
    


# In[108]:

unique_G4_DNArepair_in_BG4=remove_duplicate_G4(DNArepair_in_BG4)


# In[109]:

unique_G4_DNArepair_in_XPB_XPD=remove_duplicate_G4(DNArepair_in_XPB_XPD)


# In[114]:

unique_G4_DNArepair_in_XPB_XPD.to_csv('/Users/Yun/Desktop/dna_repair_gene/unique_G4_DNArepair_in_XPB_XPD.txt', sep='\t', inder=False)


# In[115]:

unique_G4_DNArepair_in_BG4.to_csv('/Users/Yun/Desktop/dna_repair_gene/unique_G4_DNArepair_in_BG4.txt', sep='\t', inder=False)


# In[117]:

unique_G4_DNArepair_in_BG4.iloc[:,12].unique()


# In[118]:

unique_G4_DNArepair_in_XPB_XPD.iloc[:,12].unique()


# In[135]:

#groupby gene symbol, count the number, then sort 
sort_BG4_repair=unique_G4_DNArepair_in_BG4.groupby(unique_G4_DNArepair_in_BG4.iloc[:,12]).count().sort(12, ascending=False).iloc[:,0:1]


# In[132]:

unique_G4_DNArepair_in_BG4.groupby(unique_G4_DNArepair_in_BG4.iloc[:,12]).count().sort(12, ascending=False).iloc[:,2].to_csv('/Users/Yun/Desktop/dna_repair_gene/sort_G4_repair_BG4.txt', sep='\t')


# In[133]:

unique_G4_DNArepair_in_XPB_XPD.groupby(unique_G4_DNArepair_in_XPB_XPD.iloc[:,12]).count().sort(12, ascending=False).iloc[:,0].to_csv("/Users/Yun/Desktop/dna_repair_gene/sort_G4_repair_XPB_XPD.txt", sep='\t')


# In[137]:

sort_repair_XPB_XPD=unique_G4_DNArepair_in_XPB_XPD.groupby(unique_G4_DNArepair_in_XPB_XPD.iloc[:,12]).count().sort(12, ascending=False).iloc[:,0:1]


# In[139]:

sort_BG4_repair.columns=['BG4_count']


# In[141]:

sort_repair_XPB_XPD.columns=['XPB_XPD_count']


# In[154]:

#merge XPB_XPD with BG4 by outer join on index, sort by columns
sort_repair_XPB_XPD.join(sort_BG4_repair, how='outer').sort(['BG4_count', 'XPB_XPD_count'], ascending=False).to_csv("/Users/Yun/Desktop/dna_repair_gene/sort_XPB_XPD_BG4_DNArepair.txt", na_rep='NA',sep=',')


# In[156]:

sort_repair_XPB_XPD.join(sort_BG4_repair, how='inner').sort(['BG4_count', 'XPB_XPD_count'], ascending=False).to_csv("/Users/Yun/Desktop/dna_repair_gene/sort_repair_inner_join_XPB_XPD.txt", sep='\t')


# In[ ]:



